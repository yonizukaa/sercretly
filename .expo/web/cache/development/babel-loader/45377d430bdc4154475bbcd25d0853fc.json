{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\nexport default function TabView(_ref) {\n  var onIndexChange = _ref.onIndexChange,\n      navigationState = _ref.navigationState,\n      renderScene = _ref.renderScene,\n      initialLayout = _ref.initialLayout,\n      _ref$keyboardDismissM = _ref.keyboardDismissMode,\n      keyboardDismissMode = _ref$keyboardDismissM === void 0 ? 'auto' : _ref$keyboardDismissM,\n      _ref$lazy = _ref.lazy,\n      lazy = _ref$lazy === void 0 ? false : _ref$lazy,\n      _ref$lazyPreloadDista = _ref.lazyPreloadDistance,\n      lazyPreloadDistance = _ref$lazyPreloadDista === void 0 ? 0 : _ref$lazyPreloadDista,\n      onSwipeStart = _ref.onSwipeStart,\n      onSwipeEnd = _ref.onSwipeEnd,\n      _ref$renderLazyPlaceh = _ref.renderLazyPlaceholder,\n      renderLazyPlaceholder = _ref$renderLazyPlaceh === void 0 ? function () {\n    return null;\n  } : _ref$renderLazyPlaceh,\n      _ref$renderTabBar = _ref.renderTabBar,\n      renderTabBar = _ref$renderTabBar === void 0 ? function (props) {\n    return React.createElement(TabBar, props);\n  } : _ref$renderTabBar,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      style = _ref.style,\n      _ref$swipeEnabled = _ref.swipeEnabled,\n      swipeEnabled = _ref$swipeEnabled === void 0 ? true : _ref$swipeEnabled,\n      _ref$tabBarPosition = _ref.tabBarPosition,\n      tabBarPosition = _ref$tabBarPosition === void 0 ? 'top' : _ref$tabBarPosition;\n\n  var _React$useState = React.useState(_objectSpread({\n    width: 0,\n    height: 0\n  }, initialLayout)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var jumpToIndex = function jumpToIndex(index) {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (prevLayout) {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    });\n  };\n\n  return React.createElement(View, {\n    onLayout: handleLayout,\n    style: [styles.pager, style]\n  }, React.createElement(Pager, {\n    layout: layout,\n    navigationState: navigationState,\n    keyboardDismissMode: keyboardDismissMode,\n    swipeEnabled: swipeEnabled,\n    onSwipeStart: onSwipeStart,\n    onSwipeEnd: onSwipeEnd,\n    onIndexChange: jumpToIndex\n  }, function (_ref2) {\n    var position = _ref2.position,\n        render = _ref2.render,\n        addEnterListener = _ref2.addEnterListener,\n        jumpTo = _ref2.jumpTo;\n    var sceneRendererProps = {\n      position: position,\n      layout: layout,\n      jumpTo: jumpTo\n    };\n    return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n      navigationState: navigationState\n    })), render(navigationState.routes.map(function (route, i) {\n      return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n        addEnterListener: addEnterListener,\n        key: route.key,\n        index: i,\n        lazy: typeof lazy === 'function' ? lazy({\n          route: route\n        }) : lazy,\n        lazyPreloadDistance: lazyPreloadDistance,\n        navigationState: navigationState,\n        style: sceneContainerStyle\n      }), function (_ref3) {\n        var loading = _ref3.loading;\n        return loading ? renderLazyPlaceholder({\n          route: route\n        }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          route: route\n        }));\n      });\n    })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n      navigationState: navigationState\n    })));\n  }));\n}\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["keyboardDismissMode","lazy","lazyPreloadDistance","renderLazyPlaceholder","renderTabBar","props","swipeEnabled","tabBarPosition","width","height","initialLayout","jumpToIndex","index","navigationState","onIndexChange","handleLayout","e","setLayout","prevLayout","styles","jumpTo","sceneRendererProps","position","layout","render","route","sceneContainerStyle","loading","renderScene","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport TabBar from './TabBar';\nimport SceneView from './SceneView';\nimport Pager from './Pager';\nimport type {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;\n  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;\n  renderTabBar?: (\n    props: SceneRendererProps & { navigationState: NavigationState<T> }\n  ) => React.ReactNode;\n  tabBarPosition?: 'top' | 'bottom';\n  initialLayout?: Partial<Layout>;\n  lazy?: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance?: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function TabView<T extends Route>({\n  onIndexChange,\n  navigationState,\n  renderScene,\n  initialLayout,\n  keyboardDismissMode = 'auto',\n  lazy = false,\n  lazyPreloadDistance = 0,\n  onSwipeStart,\n  onSwipeEnd,\n  renderLazyPlaceholder = () => null,\n  renderTabBar = (props) => <TabBar {...props} />,\n  sceneContainerStyle,\n  style,\n  swipeEnabled = true,\n  tabBarPosition = 'top',\n}: Props<T>) {\n  const [layout, setLayout] = React.useState({\n    width: 0,\n    height: 0,\n    ...initialLayout,\n  });\n\n  const jumpToIndex = (index: number) => {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((prevLayout) => {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return { height, width };\n    });\n  };\n\n  return (\n    <View onLayout={handleLayout} style={[styles.pager, style]}>\n      <Pager\n        layout={layout}\n        navigationState={navigationState}\n        keyboardDismissMode={keyboardDismissMode}\n        swipeEnabled={swipeEnabled}\n        onSwipeStart={onSwipeStart}\n        onSwipeEnd={onSwipeEnd}\n        onIndexChange={jumpToIndex}\n      >\n        {({ position, render, addEnterListener, jumpTo }) => {\n          // All of the props here must not change between re-renders\n          // This is crucial to optimizing the routes with PureComponent\n          const sceneRendererProps = {\n            position,\n            layout,\n            jumpTo,\n          };\n\n          return (\n            <React.Fragment>\n              {tabBarPosition === 'top' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n              {render(\n                navigationState.routes.map((route, i) => {\n                  return (\n                    <SceneView\n                      {...sceneRendererProps}\n                      addEnterListener={addEnterListener}\n                      key={route.key}\n                      index={i}\n                      lazy={typeof lazy === 'function' ? lazy({ route }) : lazy}\n                      lazyPreloadDistance={lazyPreloadDistance}\n                      navigationState={navigationState}\n                      style={sceneContainerStyle}\n                    >\n                      {({ loading }) =>\n                        loading\n                          ? renderLazyPlaceholder({ route })\n                          : renderScene({\n                              ...sceneRendererProps,\n                              route,\n                            })\n                      }\n                    </SceneView>\n                  );\n                })\n              )}\n              {tabBarPosition === 'bottom' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n            </React.Fragment>\n          );\n        }}\n      </Pager>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
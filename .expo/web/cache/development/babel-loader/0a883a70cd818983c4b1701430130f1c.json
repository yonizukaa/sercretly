{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { auth, db } from \"../firebase\";\nimport { useRoute } from \"@react-navigation/native\";\nimport GlobalContext from \"../context/Context\";\nimport { collection, doc, setDoc } from \"firebase/firestore\";\nvar randomId = nanoid();\nexport default function Chat() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      emailHash = _useState2[0],\n      setEmailHash = _useState2[1];\n\n  var _useContext = useContext(GlobalContext),\n      colors = _useContext.theme.colors;\n\n  var currentUser = auth.currentUser;\n  var route = useRoute();\n  var room = route.params.room;\n  var selectedImage = route.params.selectedImage;\n  var userB = route.params.user;\n  var senderUser = currentUser.photoURL ? {\n    name: currentUser.displayName,\n    _id: currentUser.uid,\n    avatar: currentUser.photoURL\n  } : {\n    name: currentUser.displayName,\n    _id: currentUser.uid\n  };\n  var roomId = room ? room.id : randomId;\n  var roomRef = doc(db, \"rooms\", roomId);\n  var roomMessagesref = collection(db, \"rooms\", roomId, \"messages\");\n  useEffect(function () {\n    (function _callee() {\n      var currUserData, userBData, roomData;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (room) {\n                _context.next = 14;\n                break;\n              }\n\n              currUserData = {\n                displayName: currentUser.displayName,\n                email: currentUser.email\n              };\n\n              if (currentUser.photoURL) {\n                currUserData.photoURL = currentUser.photoURL;\n              }\n\n              userBData = {\n                displayName: userB.contactName || userB.displayName || \"\",\n                email: userB.email\n              };\n\n              if (userB.photoURL) {\n                userBData.photoURL = userB.photoURL;\n              }\n\n              roomData = {\n                participants: [currUserData, userBData],\n                participantsArray: [currentUser.email, userB.email]\n              };\n              _context.prev = 6;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(setDoc(roomRef, roomData));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](6);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[6, 11]], Promise);\n    })();\n  }, []);\n  return React.createElement(View, null, React.createElement(Text, null, \"Chat\"));\n}","map":{"version":3,"names":["nanoid","React","useContext","useEffect","useState","auth","db","useRoute","GlobalContext","collection","doc","setDoc","randomId","Chat","emailHash","setEmailHash","colors","theme","currentUser","route","room","params","selectedImage","userB","user","senderUser","photoURL","name","displayName","_id","uid","avatar","roomId","id","roomRef","roomMessagesref","currUserData","email","userBData","contactName","roomData","participants","participantsArray","console","log"],"sources":["C:/Users/johan/OneDrive/Bureau/Appmobile/Secretly/wp-clone-starter/screens/Chat.js"],"sourcesContent":["//@refresh reset\r\n\r\nimport { View, Text } from \"react-native\";\r\nimport \"react-native-get-random-values\";\r\nimport { nanoid } from \"nanoid\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { auth, db } from \"../firebase\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport GlobalContext from \"../context/Context\";\r\nimport { collection, doc, setDoc } from \"firebase/firestore\";\r\n\r\nconst randomId = nanoid();\r\nexport default function Chat() {\r\n  const [emailHash, setEmailHash] = useState(\"\");\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(GlobalContext);\r\n  const { currentUser } = auth;\r\n  const route = useRoute();\r\n  const room = route.params.room;\r\n  const selectedImage = route.params.selectedImage;\r\n  const userB = route.params.user;\r\n\r\n  const senderUser = currentUser.photoURL\r\n    ? {\r\n        name: currentUser.displayName,\r\n        _id: currentUser.uid,\r\n        avatar: currentUser.photoURL,\r\n      }\r\n    : { name: currentUser.displayName, _id: currentUser.uid };\r\n\r\n  const roomId = room ? room.id : randomId;\r\n\r\n  const roomRef = doc(db, \"rooms\", roomId);\r\n  const roomMessagesref = collection(db, \"rooms\", roomId, \"messages\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!room) {\r\n        const currUserData = {\r\n          displayName: currentUser.displayName,\r\n          email: currentUser.email,\r\n        };\r\n        if (currentUser.photoURL) {\r\n          currUserData.photoURL = currentUser.photoURL;\r\n        }\r\n        const userBData = {\r\n          displayName: userB.contactName || userB.displayName || \"\",\r\n          email: userB.email,\r\n        };\r\n        if (userB.photoURL) {\r\n          userBData.photoURL = userB.photoURL;\r\n        }\r\n        const roomData = {\r\n          participants: [currUserData, userBData],\r\n          participantsArray: [currentUser.email, userB.email],\r\n        };\r\n        try {\r\n          await setDoc(roomRef, roomData);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <View>\r\n      <Text>Chat</Text>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";;;;AAGA,OAAO,gCAAP;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,IAAT,EAAeC,EAAf;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,aAAP;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAAwC,oBAAxC;AAEA,IAAMC,QAAQ,GAAGZ,MAAM,EAAvB;AACA,eAAe,SAASa,IAAT,GAAgB;EAC7B,gBAAkCT,QAAQ,CAAC,EAAD,CAA1C;EAAA;EAAA,IAAOU,SAAP;EAAA,IAAkBC,YAAlB;;EACA,kBAEIb,UAAU,CAACM,aAAD,CAFd;EAAA,IACWQ,MADX,eACEC,KADF,CACWD,MADX;;EAGA,IAAQE,WAAR,GAAwBb,IAAxB,CAAQa,WAAR;EACA,IAAMC,KAAK,GAAGZ,QAAQ,EAAtB;EACA,IAAMa,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;EACA,IAAME,aAAa,GAAGH,KAAK,CAACE,MAAN,CAAaC,aAAnC;EACA,IAAMC,KAAK,GAAGJ,KAAK,CAACE,MAAN,CAAaG,IAA3B;EAEA,IAAMC,UAAU,GAAGP,WAAW,CAACQ,QAAZ,GACf;IACEC,IAAI,EAAET,WAAW,CAACU,WADpB;IAEEC,GAAG,EAAEX,WAAW,CAACY,GAFnB;IAGEC,MAAM,EAAEb,WAAW,CAACQ;EAHtB,CADe,GAMf;IAAEC,IAAI,EAAET,WAAW,CAACU,WAApB;IAAiCC,GAAG,EAAEX,WAAW,CAACY;EAAlD,CANJ;EAQA,IAAME,MAAM,GAAGZ,IAAI,GAAGA,IAAI,CAACa,EAAR,GAAarB,QAAhC;EAEA,IAAMsB,OAAO,GAAGxB,GAAG,CAACJ,EAAD,EAAK,OAAL,EAAc0B,MAAd,CAAnB;EACA,IAAMG,eAAe,GAAG1B,UAAU,CAACH,EAAD,EAAK,OAAL,EAAc0B,MAAd,EAAsB,UAAtB,CAAlC;EAEA7B,SAAS,CAAC,YAAM;IACd,CAAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACMiB,IADN;gBAAA;gBAAA;cAAA;;cAESgB,YAFT,GAEwB;gBACnBR,WAAW,EAAEV,WAAW,CAACU,WADN;gBAEnBS,KAAK,EAAEnB,WAAW,CAACmB;cAFA,CAFxB;;cAMG,IAAInB,WAAW,CAACQ,QAAhB,EAA0B;gBACxBU,YAAY,CAACV,QAAb,GAAwBR,WAAW,CAACQ,QAApC;cACD;;cACKY,SATT,GASqB;gBAChBV,WAAW,EAAEL,KAAK,CAACgB,WAAN,IAAqBhB,KAAK,CAACK,WAA3B,IAA0C,EADvC;gBAEhBS,KAAK,EAAEd,KAAK,CAACc;cAFG,CATrB;;cAaG,IAAId,KAAK,CAACG,QAAV,EAAoB;gBAClBY,SAAS,CAACZ,QAAV,GAAqBH,KAAK,CAACG,QAA3B;cACD;;cACKc,QAhBT,GAgBoB;gBACfC,YAAY,EAAE,CAACL,YAAD,EAAeE,SAAf,CADC;gBAEfI,iBAAiB,EAAE,CAACxB,WAAW,CAACmB,KAAb,EAAoBd,KAAK,CAACc,KAA1B;cAFJ,CAhBpB;cAAA;cAAA;cAAA,iCAqBW1B,MAAM,CAACuB,OAAD,EAAUM,QAAV,CArBjB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAuBKG,OAAO,CAACC,GAAR;;YAvBL;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD;EA2BD,CA5BQ,EA4BN,EA5BM,CAAT;EA8BA,OACE,oBAAC,IAAD,QACE,oBAAC,IAAD,eADF,CADF;AAKD"},"metadata":{},"sourceType":"module"}
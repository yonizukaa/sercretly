{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar _UIManager$getViewMan, _UIManager$getViewMan2, _UIManager$getConstan;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nvar _NativeModules$UIMana = NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManager$getViewMan = (_UIManager$getViewMan2 = UIManager.getViewManagerConfig) === null || _UIManager$getViewMan2 === void 0 ? void 0 : _UIManager$getViewMan2.call(UIManager, 'getConstants')) !== null && _UIManager$getViewMan !== void 0 ? _UIManager$getViewMan : (_UIManager$getConstan = UIManager.getConstants) === null || _UIManager$getConstan === void 0 ? void 0 : _UIManager$getConstan.call(UIManager);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  validProps.forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref2) {\n  var name = _ref2.name,\n      _ref2$allowedProps = _ref2.allowedProps,\n      allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,\n      _ref2$config = _ref2.config,\n      config = _ref2$config === void 0 ? {} : _ref2$config,\n      transformProps = _ref2.transformProps,\n      _ref2$customNativePro = _ref2.customNativeProps,\n      customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;\n\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      _classCallCheck(this, Handler);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n\n      _this.handlerTag = handlerTag++;\n      _this.config = {};\n      _this.propsRef = React.createRef();\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\".concat(props.id, \"\\\" already registered\"));\n        }\n\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n            onGestureEvent = _this$props5.onGestureEvent,\n            onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n            onHandlerStateChange = _this$props6.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n\n    return Handler;\n  }(React.Component);\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAQA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,sBAAP;AAEA,SAASC,KAAT;;AASA,SAASC,cAAT,CACEC,IADF,EAEyE;EACvE,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B,OAAOD,IAAP;EAC3B,OAAOG,gBAAgB,CAACH,IAAD,CAAvB;AACD;;AAED,4BAA2BI,aAA3B,CAAQC,SAAR;AAAA,IAAQA,SAAR,sCAAoB,EAApB;AAEA,IAAMC,oBAAoB,GAAG;EAC3BC,qBAAqB,EAAE;IAAEC,gBAAgB,EAAE;EAApB,CADI;EAE3BC,2BAA2B,EAAE;IAC3BD,gBAAgB,EAAE;EADS;AAFF,CAA7B;AAWAH,SAAS,CAACK,uBAAVL,mCACKA,SAAS,CAACK,uBADfL,GAEKC,oBAFLD;AAOA,IAAMM,kBAAkB,sDACtBN,SAAS,CAACO,oBADY,2DACtBC,uCAAiC,cAAjC,CADsB,kGAEtBR,SAAS,CAACS,YAFY,0DAEtBC,qCAFF;;AAIA,IAAIJ,kBAAJ,EAAwB;EACtBA,kBAAkB,CAACD,uBAAnBC,mCACKA,kBAAkB,CAACD,uBADxBC,GAEKL,oBAFLK;;;AAOF,4BAOIN,SAPJ,CACEW,cADF;AAAA,IACkBC,iBADlB,sCACsC,YAAM,CADtC,CAAN;AAAA,4BAOIZ,SAPJ,CAIEa,gBAJF;AAAA,IAIoBC,mBAJpB,sCAI0C,YAAM,CAE7C,CANH;;AAQAd,SAAS,CAACW,cAAVX,GAA2B,UAACe,GAAD,EAAcC,oBAAd,EAAgD;EACzExB,sBAAsB,CAACyB,oBAAvBzB,CAA4CuB,GAA5CvB,EAAiDwB,oBAAjDxB;EACAoB,iBAAiB,CAACG,GAAD,EAAMC,oBAAN,CAAjBJ;AAFF;;AAIAZ,SAAS,CAACa,gBAAVb,GAA6B,YAAM;EACjCR,sBAAsB,CAAC0B,sBAAvB1B;EACAsB,mBAAmB;AAFrB;;AAKA,IAAIK,UAAU,GAAG,CAAjB;AACA,IAAMC,cAAsC,GAAG,EAA/C;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAAuCC,IAAvC,EAAqD;EAGnD,OACED,KAAK,KAAKE,SAAVF,KACCA,KAAK,KAAKG,MAAM,CAACH,KAAD,CAAhBA,IACC,EAAE,gBAAiBA,KAAnB,CAFFA,KAGAC,IAAI,KAAK,sBAHTD,IAIAC,IAAI,KAAK,gBALX;AAOD;;AAED,SAASG,YAAT,CACEC,KADF,EAEEC,UAFF,EAIE;EAAA,IADAC,QACA,uEADoC,EACpC;;EACA,IAAMC,GAAG,qBAAQD,QAAR,CAAT;;EACAD,UAAU,CAACG,OAAXH,CAAoBI,aAAD,EAAS;IAC1B,IAAMC,KAAK,GAAGN,KAAK,CAACK,GAAD,CAAnB;;IACA,IAAIX,aAAa,CAACY,KAAD,EAAQD,GAAR,CAAjB,EAA+B;MAC7B,IAAIC,MAAK,GAAGN,KAAK,CAACK,GAAD,CAAjB;;MACA,IAAIA,GAAG,KAAK,sBAARA,IAAkCA,GAAG,KAAK,SAA9C,EAAyD;QACvDC,MAAK,GAAGC,wBAAwB,CAACP,KAAK,CAACK,GAAD,CAAN,CAAhCC;MADF,OAEO,IAAID,GAAG,KAAK,SAAZ,EAAuB;QAC5B,IAAI,OAAOC,MAAP,KAAiB,QAArB,EAA+B;UAC7BA,MAAK,GAAG;YAAEE,GAAG,EAAEF,MAAP;YAAcG,IAAI,EAAEH,MAApB;YAA2BI,MAAM,EAAEJ,MAAnC;YAA0CK,KAAK,EAAEL;UAAjD,CAARA;QACD;MACF;;MACDH,GAAG,CAACE,GAAD,CAAHF,GAAWG,MAAXH;IACD;EAZH;EAcA,OAAOA,GAAP;AACD;;AAED,SAASI,wBAAT,CAAkCK,UAAlC,EAAmD;EACjD,IAAI,CAACC,KAAK,CAACC,OAAND,CAAcD,UAAdC,CAAL,EAAgC;IAC9BD,UAAU,GAAG,CAACA,UAAD,CAAbA;EACD;;EAED,IAAI3C,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzB,OAAO2C,UAAU,CACdG,GADIH,CACA;MAAA,IAAGI,OAAH,QAAGA,OAAH;MAAA,OAAmCA,OAAnC;IAAA,CADAJ,EAEJK,MAFIL,CAEIM,gBAAD;MAAA,OAAiBA,MAAjB;IAAA,CAFHN,CAAP;EAN+C;;EAWjD,OAAOA,UAAU,CACdG,GADIH,CAEFO,mBAAD;IAAA;;IAAA,OACE1B,cAAc,CAAC0B,SAAD,CAAd1B,2BAA6B0B,SAAS,CAACH,OAAvC,uDAA6BI,mBAAmB5B,UAAhDC,KAA8D,CAAC,CADjE;EAFG,GAKJwB,MALIL,CAKIpB,oBAAD;IAAA,OAAwBA,UAAU,GAAG,CAArC;EAAA,CALHoB,CAAP;AAMD;;AAKD,SAASS,iBAAT,CACErB,KADF,EAEE;EAEA,IAAMsB,OAAO,GAAIC,SAAXD,OAAWC,KAAD,EAAuB;IACrC,IAAI,CAACV,KAAK,CAACC,OAAND,CAAcU,IAAdV,CAAL,EAA0B;MACxB,OAAOU,IAAI,IAAIA,IAAI,CAACP,OAALO,KAAiB,IAAhC;IACD;;IACD,OAAOA,IAAI,CAACC,IAALD,CAAWE,WAAD;MAAA,OAAOA,CAAC,IAAIA,CAAC,CAACT,OAAFS,KAAc,IAA1B;IAAA,CAAVF,CAAP;EAJF;;EAMA,OAAOD,OAAO,CAACtB,KAAK,CAAC,sBAAD,CAAN,CAAPsB,IAA0CA,OAAO,CAACtB,KAAK,CAAC,SAAD,CAAN,CAAxD;AACD;;AAED,IAAM0B,mBAAmB,sEACtB5D,KAAK,CAAC6D,YADgB,EACD9B,SADC,0CAEtB/B,KAAK,CAAC8D,KAFgB,EAER,SAFQ,0CAGtB9D,KAAK,CAAC+D,MAHgB,EAGP,UAHO,0CAItB/D,KAAK,CAACgE,SAJgB,EAIJ,aAJI,0CAKtBhE,KAAK,CAACiE,MALgB,EAKP,aALO,0CAMtBjE,KAAK,CAACkE,GANgB,EAMV,SANU,wBAAzB;AA0BA,eAAe,SAASC,aAAT,QAS6D;EAAA,IAL1ErC,IAK0E,SAL1EA,IAK0E;EAAA,+BAJ1EsC,YAI0E;EAAA,IAJ1EA,YAI0E,mCAJ3D,EAI2D;EAAA,yBAH1EC,MAG0E;EAAA,IAH1EA,MAG0E,6BAHjE,EAGiE;EAAA,IAF1EC,cAE0E,SAF1EA,cAE0E;EAAA,kCAD1EC,iBAC0E;EAAA,IAD1EA,iBAC0E,sCADtD,EACsD;;EAAA,IACpEC,OADoE;IAAA;;IAAA;;IAWxEC,iBAAYvC,KAAZuC,EAA8C;MAAA;;MAAA;;MAC5C,0BAAMvC,KAAN;;MAD4CwC;;MAAAA;;MAAAA;;MAAAA;;MAAAA;;MAAAA,iEAFmB,IAEnB;;MAAAA,wEA4DbC,eAAD,EAA4B;QAC1D,IAAIA,KAAK,CAACC,WAAND,CAAkBjD,UAAlBiD,KAAiC,MAAKjD,UAA1C,EAAsD;UAAA;;UACpD,8CAAKQ,KAAL,EAAW2C,cAAX,kGAA4BF,KAA5B;QADF,OAEO;UAAA;;UACL,gDAAKzC,KAAL,EAAWzB,qBAAX,qGAAmCkE,KAAnC;QACD;MAjE2C;;MAAAD,8EAsE5CC,eADoC,EAEjC;QACH,IAAIA,KAAK,CAACC,WAAND,CAAkBjD,UAAlBiD,KAAiC,MAAKjD,UAA1C,EAAsD;UAAA;;UACpD,+CAAKQ,KAAL,EAAW4C,oBAAX,mGAAkCH,KAAlC;UAEA,IAAMI,KAA4B,GAAGJ,KAAK,CAACC,WAAND,CAAkBI,KAAvD;UACA,IAAMC,cAAc,GAAGpB,mBAAmB,CAACmB,KAAD,CAA1C;UACA,IAAME,YAAY,GAAGD,cAAc,IAAI,MAAK9C,KAAL,CAAW8C,cAAX,CAAvC;;UACA,IAAIC,YAAY,IAAI,OAAOA,YAAP,KAAwB,UAA5C,EAAwD;YACtDA,YAAY,CAACN,KAAD,CAAZM;UACD;QARH,OASO;UAAA;;UACL,gDAAK/C,KAAL,EAAWvB,2BAAX,qGAAyCgE,KAAzC;QACD;MAnF2C;;MAAAD,6DAsFxBxE,cAAD,EAAe;QAClC,MAAKgF,QAAL,GAAgBhF,IAAhB;QAEA,IAAMiF,KAAK,GAAGtF,KAAK,CAACuF,QAANvF,CAAewF,IAAfxF,CAAoB,MAAKqC,KAAL,CAAWoD,QAA/BzF,CAAd;QAEA,IAAQ0F,GAAR,GAAqBJ,KAArB,CAAQI,GAAR;;QACA,IAAIA,GAAG,KAAK,IAAZ,EAAkB;UAChB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;YAC7BA,GAAG,CAACrF,IAAD,CAAHqF;UADF,OAEO;YACLA,GAAG,CAACrC,OAAJqC,GAAcrF,IAAdqF;UACD;QACF;MAlG2C;;MAAAb,uEAsG5Cc,mBAD6B,EAE1B;QACH,MAAKnB,MAAL,GAAcmB,SAAd;QAEAzF,sBAAsB,CAAC0F,oBAAvB1F,CACE+B,IADF/B,EAEE,MAAK2B,UAFP3B,EAGEyF,SAHFzF;MA1G4C;;MAAA2E,uEAiHdgB,oBAAD,EAAwB;QACrD,MAAKC,OAAL,GAAeD,UAAf;;QAEA,IAAIvF,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;UAExBJ,sBAAsB,CAAC6F,oBAAvB7F,CACC,MAAK2B,UADN3B,EAEC2F,UAFD3F,EAGC,MAAK8F,QAHN9F;QAFH,OAOO;UACLA,sBAAsB,CAAC6F,oBAAvB7F,CACE,MAAK2B,UADP3B,EAEE2F,UAFF3F;QAID;MAhI2C;;MAAA2E,uEAoI5Cc,mBAD6B,EAE1B;QACH,MAAKnB,MAAL,GAAcmB,SAAd;QAEAzF,sBAAsB,CAAC+F,oBAAvB/F,CAA4C,MAAK2B,UAAjD3B,EAA6DyF,SAA7DzF;MAxI4C;;MAE5C,MAAK2B,UAAL,GAAkBA,UAAU,EAA5B;MACA,MAAK2C,MAAL,GAAc,EAAd;MACA,MAAKwB,QAAL,GAAgBhG,KAAK,CAACkG,SAANlG,EAAhB;;MACA,IAAIqC,KAAK,CAAC8D,EAAV,EAAc;QACZ,IAAIrE,cAAc,CAACO,KAAK,CAAC8D,EAAP,CAAdrE,KAA6BI,SAAjC,EAA4C;UAC1C,MAAM,IAAIkE,KAAJ,6BAA8B/D,KAAK,CAAC8D,EAApC,2BAAN;QACD;;QACDrE,cAAc,CAACO,KAAK,CAAC8D,EAAP,CAAdrE,GAA2B,MAAKD,UAAhCC;MACD;;MAV2C;IAW7C;;IAtBuE;MAAA;MAAA,OAwBxEuE,6BAAoB;QAAA;;QAClB,IAAMhE,KAAsB,GAAG,KAAKA,KAApC;;QACA,IAAIqB,iBAAiB,CAACrB,KAAD,CAArB,EAA8B;UAO5B,KAAKiE,cAAL,GAAsBC,YAAY,CAAC,YAAM;YACvC,OAAKD,cAAL,GAAsB,IAAtB;;YACA,OAAKE,MAAL;UAFgC,EAAlC;QAID;;QAED,KAAKZ,oBAAL,CACExD,YAAY,CACVqC,cAAc,GAAGA,cAAc,CAAC,KAAKpC,KAAN,CAAjB,GAAgC,KAAKA,KADzC,+BAENkC,YAFM,sBAEWG,iBAFX,IAGVF,MAHU,CADd;QAQA,KAAKuB,oBAAL,CAA0B3F,cAAc,CAAC,KAAKiF,QAAN,CAAxC;MACD;IAhDuE;MAAA;MAAA,OAkDxEoB,8BAAqB;QACnB,IAAMX,OAAO,GAAG1F,cAAc,CAAC,KAAKiF,QAAN,CAA9B;;QACA,IAAI,KAAKS,OAAL,KAAiBA,OAArB,EAA8B;UAC5B,KAAKC,oBAAL,CAA0BD,OAA1B;QACD;;QACD,KAAKU,MAAL;MACD;IAxDuE;MAAA;MAAA,OA0DxEE,gCAAuB;QACrBxG,sBAAsB,CAACyG,kBAAvBzG,CAA0C,KAAK2B,UAA/C3B;;QACA,IAAI,KAAKoG,cAAT,EAAyB;UACvBM,cAAc,CAAC,KAAKN,cAAN,CAAdM;QAHmB;;QAMrB,IAAMpD,SAA6B,GAAG,KAAKnB,KAAL,CAAW8D,EAAjD;;QACA,IAAI3C,SAAJ,EAAe;UAEb,OAAO1B,cAAc,CAAC0B,SAAD,CAArB;QACD;MACF;IArEuE;MAAA;MAAA,OAsJhEgD,kBAAS;QACf,IAAMb,SAAS,GAAGvD,YAAY,CAC5BqC,cAAc,GAAGA,cAAc,CAAC,KAAKpC,KAAN,CAAjB,GAAgC,KAAKA,KADvB,+BAExBkC,YAFwB,sBAEPG,iBAFO,IAG5BF,MAH4B,CAA9B;;QAKA,IAAI,CAACvE,SAAS,CAAC,KAAKuE,MAAN,EAAcmB,SAAd,CAAd,EAAwC;UACtC,KAAKM,oBAAL,CAA0BN,SAA1B;QACD;MACF;IA/JuE;MAAA;MAAA,OAiKxEkB,wBAAeC,OAAfD,EAA6B;QAC3B,IAAME,WAAW,mCAAQ,KAAK1E,KAAb,GAAuByE,OAAvB,CAAjB;;QACA,IAAMnB,SAAS,GAAGvD,YAAY,CAC5BqC,cAAc,GAAGA,cAAc,CAACsC,WAAD,CAAjB,GAAiCA,WADnB,+BAExBxC,YAFwB,sBAEPG,iBAFO,IAG5BF,MAH4B,CAA9B;QAKA,KAAKyB,oBAAL,CAA0BN,SAA1B;MACD;IAzKuE;MAAA;MAAA,OA2KxEqB,kBAAS;QACP,IAAIC,mBAAmB,GAAG,KAAKrG,qBAA/B;QAMA,mBAG4B,KAAKyB,KAHjC;QAAA,IACE2C,cADF,gBACEA,cADF;QAAA,IAEEpE,qBAFF,gBAEEA,qBAFF;;QAIA,IAAIoE,cAAc,IAAI,OAAOA,cAAP,KAA0B,UAAhD,EAA4D;UAI1D,IAAIpE,qBAAJ,EAA2B;YACzB,MAAM,IAAIwF,KAAJ,CACJ,yEADI,CAAN;UAGD;;UACDa,mBAAmB,GAAGjC,cAAtBiC;QATF,OAUO;UACL,IACErG,qBAAqB,IACrB,OAAOA,qBAAP,KAAiC,UAFnC,EAGE;YACA,MAAM,IAAIwF,KAAJ,CACJ,yEADI,CAAN;UAGD;QACF;;QAED,IAAIc,wBAAwB,GAAG,KAAKpG,2BAApC;QAMA,mBAGkC,KAAKuB,KAHvC;QAAA,IACE4C,oBADF,gBACEA,oBADF;QAAA,IAEEnE,2BAFF,gBAEEA,2BAFF;;QAIA,IAAImE,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,UAA5D,EAAwE;UAItE,IAAInE,2BAAJ,EAAiC;YAC/B,MAAM,IAAIsF,KAAJ,CACJ,yEADI,CAAN;UAGD;;UACDc,wBAAwB,GAAGjC,oBAA3BiC;QATF,OAUO;UACL,IACEpG,2BAA2B,IAC3B,OAAOA,2BAAP,KAAuC,UAFzC,EAGE;YACA,MAAM,IAAIsF,KAAJ,CACJ,yEADI,CAAN;UAGD;QACF;;QACD,IAAMe,MAAM,GAAG;UACbvG,qBAAqB,EAAEqG,mBADV;UAEbnG,2BAA2B,EAAEoG;QAFhB,CAAf;QAKA,KAAKlB,QAAL,CAAc3C,OAAd,GAAwB8D,MAAxB;QAEA,IAAM7B,KAAU,GAAGtF,KAAK,CAACuF,QAANvF,CAAewF,IAAfxF,CAAoB,KAAKqC,KAAL,CAAWoD,QAA/BzF,CAAnB;QACA,IAAIoH,aAAa,GAAG9B,KAAK,CAACjD,KAANiD,CAAYG,QAAhC;;QACA,IACE4B,SAAS,CAACC,kBAAVD,IACA/B,KAAK,CAACiC,IADNF,KAEC/B,KAAK,CAACiC,IAANjC,KAAe,wBAAfA,IACCA,KAAK,CAACiC,IAANjC,CAAWrD,IAAXqD,KAAoB,MADrBA,IAECA,KAAK,CAACiC,IAANjC,CAAWkC,WAAXlC,KAA2B,MAJ7B+B,CADF,EAME;UACAD,aAAa,GAAGpH,KAAK,CAACuF,QAANvF,CAAeyH,OAAfzH,CAAuBoH,aAAvBpH,CAAhBoH;UACAA,aAAa,CAACM,IAAdN,CACEC,SAAS,CAACM,eAAVN,CAA0B;YACxBO,KAAK,EAAE,mBADiB;YAExBC,OAAO,EAAEvC,KAAK,CAACjD,KAANiD,CAAYuC;UAFG,CAA1BR,CADFD;QAMD;;QAED,OAAOpH,KAAK,CAAC8H,YAAN9H,CACLsF,KADKtF;UAGH0F,GAAG,EAAE,KAAKqC,UAHP/H;UAIHgI,WAAW,EAAE;QAJVhI,GAKAmH,MALAnH,GAOLoH,aAPKpH,CAAP;MASD;IA3QuE;;IAAA;EAAA,EACpDA,KAAK,CAACiI,SAD8C;;EAAApD,gBACpEF,OADoE,iBAEnD1C,IAFmD;;EA6Q1E,OAAO0C,OAAP;AACD","names":["React","deepEqual","RNGestureHandlerModule","State","findNodeHandle","node","Platform","OS","findNodeHandleRN","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManager$getViewMan2","getConstants","_UIManager$getConstan","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","_handlerID$current","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","componentDidMount","updateEnqueued","setImmediate","update","componentDidUpdate","componentWillUnmount","dropGestureHandler","clearImmediate","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}
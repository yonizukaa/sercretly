{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _constants$platform;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\n\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\n\nvar rawManifest = null;\n\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nvar _ref = ExponentConstants || {},\n    name = _ref.name,\n    appOwnership = _ref.appOwnership,\n    nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\n\nvar warnedAboutDeviceYearClass = false;\nvar warnedAboutIosModel = false;\nvar warnedAboutInstallationId = false;\nvar warnedAboutDeviceId = false;\nvar warnedAboutLinkingUrl = false;\n\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null\n});\n\nvar constantsPropertiesGetter = {\n  deviceYearClass: function deviceYearClass() {\n    if (!warnedAboutDeviceYearClass) {\n      console.warn(\"Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.\");\n      warnedAboutDeviceYearClass = true;\n    }\n\n    return nativeConstants.deviceYearClass;\n  },\n  installationId: function installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");\n      warnedAboutInstallationId = true;\n    }\n\n    return nativeConstants.installationId;\n  },\n  deviceId: function deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");\n      warnedAboutDeviceId = true;\n    }\n\n    return nativeConstants.installationId;\n  },\n  linkingUrl: function linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");\n      warnedAboutLinkingUrl = true;\n    }\n\n    return nativeConstants.linkingUri;\n  },\n  manifest: function manifest() {\n    var maybeManifest = getManifest();\n\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n\n    return maybeManifest;\n  },\n  manifest2: function manifest2() {\n    var maybeManifest = getManifest();\n\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest: function __unsafeNoWarnManifest() {\n    var maybeManifest = getManifest(true);\n\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest2: function __unsafeNoWarnManifest2() {\n    var maybeManifest = getManifest(true);\n\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n\n    return maybeManifest;\n  }\n};\ndefinePropertiesGetter(constants, constantsPropertiesGetter);\nObject.defineProperty(constants, '__rawManifest_TEST', {\n  get: function get() {\n    return rawManifest;\n  },\n  set: function set(value) {\n    rawManifest = value;\n  },\n  enumerable: false\n});\n\nif (constants != null && (_constants$platform = constants.platform) != null && _constants$platform.ios) {\n  var originalModel = nativeConstants.platform.ios.model;\n  definePropertiesGetter(constants.platform.ios, {\n    model: function model() {\n      if (!warnedAboutIosModel) {\n        console.warn(\"Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.\");\n        warnedAboutIosModel = true;\n      }\n\n      return originalModel;\n    }\n  });\n}\n\nfunction definePropertiesGetter(target, props) {\n  for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n    var _ref2 = _Object$entries[_i];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    var _name = _ref3[0];\n    var func = _ref3[1];\n    Object.defineProperty(target, _name, {\n      get: func,\n      enumerable: false\n    });\n  }\n}\n\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n\n  return rawManifest;\n}\n\nexport default constants;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutDeviceYearClass = false;\nlet warnedAboutIosModel = false;\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nconst constantsPropertiesGetter: AccessorProps = {\n  // Deprecated fields\n  deviceYearClass() {\n    if (!warnedAboutDeviceYearClass) {\n      console.warn(\n        `Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.`\n      );\n      warnedAboutDeviceYearClass = true;\n    }\n    return nativeConstants.deviceYearClass;\n  },\n  // Deprecated fields\n  installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  manifest(): AppManifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  manifest2(): Manifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest(): AppManifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest2(): Manifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n};\ndefinePropertiesGetter(constants, constantsPropertiesGetter);\n\nObject.defineProperty(constants, '__rawManifest_TEST', {\n  get(): AppManifest | Manifest | null {\n    return rawManifest;\n  },\n  set(value: AppManifest | Manifest | null) {\n    rawManifest = value;\n  },\n  // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n  enumerable: false,\n});\n\n// Add deprecation warning for `platform.ios.model`\nif (constants?.platform?.ios) {\n  const originalModel = nativeConstants.platform.ios.model;\n  definePropertiesGetter(constants.platform.ios, {\n    model() {\n      if (!warnedAboutIosModel) {\n        console.warn(\n          `Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.`\n        );\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    },\n  });\n}\n\ntype AccessorProps = Record<string, () => any>;\nfunction definePropertiesGetter(target: object, props: AccessorProps) {\n  for (const [name, func] of Object.entries(props)) {\n    Object.defineProperty(target, name, {\n      get: func,\n      // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n      enumerable: false,\n    });\n  }\n}\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
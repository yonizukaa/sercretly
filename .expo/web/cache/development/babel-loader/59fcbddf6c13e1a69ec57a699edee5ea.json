{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"pageSize\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExpoContacts from \"./ExpoContacts\";\nexport { PermissionStatus };\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", !!ExpoContacts.getContactsAsync);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function shareContactAsync(contactId, message) {\n  var shareOptions,\n      url,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function shareContactAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          shareOptions = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n\n          if (!(Platform.OS === 'ios')) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(writeContactToFileAsync({\n            id: contactId\n          }));\n\n        case 4:\n          url = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(Share.share({\n            url: url,\n            message: message\n          }, shareOptions));\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 10:\n          if (ExpoContacts.shareContactAsync) {\n            _context2.next = 12;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'shareContactAsync');\n\n        case 12:\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(ExpoContacts.shareContactAsync(contactId, message));\n\n        case 14:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContactsAsync() {\n  var contactQuery,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getContactsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          contactQuery = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n\n          if (ExpoContacts.getContactsAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getContactsAsync');\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ExpoContacts.getContactsAsync(contactQuery));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPagedContactsAsync() {\n  var contactQuery,\n      pageSize,\n      nOptions,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function getPagedContactsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          contactQuery = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n          pageSize = contactQuery.pageSize, nOptions = _objectWithoutProperties(contactQuery, _excluded);\n\n          if (!(pageSize && pageSize <= 0)) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n\n        case 4:\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(getContactsAsync(_objectSpread(_objectSpread({}, nOptions), {}, {\n            pageSize: pageSize\n          })));\n\n        case 6:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContactByIdAsync(id, fields) {\n  var results;\n  return _regeneratorRuntime.async(function getContactByIdAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoContacts.getContactsAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getContactsAsync');\n\n        case 2:\n          if (!(id == null)) {\n            _context5.next = 6;\n            break;\n          }\n\n          throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n\n        case 6:\n          _context5.next = 8;\n          return _regeneratorRuntime.awrap(ExpoContacts.getContactsAsync({\n            pageSize: 1,\n            pageOffset: 0,\n            fields: fields,\n            id: id\n          }));\n\n        case 8:\n          results = _context5.sent;\n\n          if (!(results && results.data && results.data.length > 0)) {\n            _context5.next = 11;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", results.data[0]);\n\n        case 11:\n          return _context5.abrupt(\"return\", undefined);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addContactAsync(contact, containerId) {\n  return _regeneratorRuntime.async(function addContactAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (ExpoContacts.addContactAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'addContactAsync');\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.addContactAsync(contact, containerId));\n\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateContactAsync(contact) {\n  return _regeneratorRuntime.async(function updateContactAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoContacts.updateContactAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'updateContactAsync');\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.updateContactAsync(contact));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function removeContactAsync(contactId) {\n  return _regeneratorRuntime.async(function removeContactAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (ExpoContacts.removeContactAsync) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'removeContactAsync');\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.removeContactAsync(contactId));\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function writeContactToFileAsync() {\n  var contactQuery,\n      _args9 = arguments;\n  return _regeneratorRuntime.async(function writeContactToFileAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          contactQuery = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n\n          if (ExpoContacts.writeContactToFileAsync) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n\n        case 3:\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ExpoContacts.writeContactToFileAsync(contactQuery));\n\n        case 5:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function presentFormAsync(contactId, contact) {\n  var formOptions,\n      adjustedOptions,\n      _args10 = arguments;\n  return _regeneratorRuntime.async(function presentFormAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          formOptions = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : {};\n\n          if (ExpoContacts.presentFormAsync) {\n            _context10.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'presentFormAsync');\n\n        case 3:\n          if (!(Platform.OS === 'ios')) {\n            _context10.next = 11;\n            break;\n          }\n\n          adjustedOptions = formOptions;\n\n          if (contactId) {\n            if (contact) {\n              contact = undefined;\n              console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');\n            }\n\n            if (adjustedOptions.isNew !== undefined) {\n              console.log('Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`');\n            }\n          }\n\n          _context10.next = 8;\n          return _regeneratorRuntime.awrap(ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions));\n\n        case 8:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 11:\n          _context10.next = 13;\n          return _regeneratorRuntime.awrap(ExpoContacts.presentFormAsync(contactId, contact, formOptions));\n\n        case 13:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addExistingGroupToContainerAsync(groupId, containerId) {\n  return _regeneratorRuntime.async(function addExistingGroupToContainerAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (ExpoContacts.addExistingGroupToContainerAsync) {\n            _context11.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId));\n\n        case 4:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 5:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createGroupAsync(name, containerId) {\n  return _regeneratorRuntime.async(function createGroupAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (ExpoContacts.createGroupAsync) {\n            _context12.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'createGroupAsync');\n\n        case 2:\n          name = name || uuidv4();\n\n          if (containerId) {\n            _context12.next = 7;\n            break;\n          }\n\n          _context12.next = 6;\n          return _regeneratorRuntime.awrap(getDefaultContainerIdAsync());\n\n        case 6:\n          containerId = _context12.sent;\n\n        case 7:\n          _context12.next = 9;\n          return _regeneratorRuntime.awrap(ExpoContacts.createGroupAsync(name, containerId));\n\n        case 9:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 10:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateGroupNameAsync(groupName, groupId) {\n  return _regeneratorRuntime.async(function updateGroupNameAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          if (ExpoContacts.updateGroupNameAsync) {\n            _context13.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n\n        case 2:\n          _context13.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.updateGroupNameAsync(groupName, groupId));\n\n        case 4:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 5:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function removeGroupAsync(groupId) {\n  return _regeneratorRuntime.async(function removeGroupAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          if (ExpoContacts.removeGroupAsync) {\n            _context14.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n\n        case 2:\n          _context14.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.removeGroupAsync(groupId));\n\n        case 4:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 5:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addExistingContactToGroupAsync(contactId, groupId) {\n  return _regeneratorRuntime.async(function addExistingContactToGroupAsync$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          if (ExpoContacts.addExistingContactToGroupAsync) {\n            _context15.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n\n        case 2:\n          _context15.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.addExistingContactToGroupAsync(contactId, groupId));\n\n        case 4:\n          return _context15.abrupt(\"return\", _context15.sent);\n\n        case 5:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function removeContactFromGroupAsync(contactId, groupId) {\n  return _regeneratorRuntime.async(function removeContactFromGroupAsync$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          if (ExpoContacts.removeContactFromGroupAsync) {\n            _context16.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n\n        case 2:\n          _context16.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.removeContactFromGroupAsync(contactId, groupId));\n\n        case 4:\n          return _context16.abrupt(\"return\", _context16.sent);\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getGroupsAsync(groupQuery) {\n  return _regeneratorRuntime.async(function getGroupsAsync$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          if (ExpoContacts.getGroupsAsync) {\n            _context17.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n\n        case 2:\n          _context17.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.getGroupsAsync(groupQuery));\n\n        case 4:\n          return _context17.abrupt(\"return\", _context17.sent);\n\n        case 5:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getDefaultContainerIdAsync() {\n  return _regeneratorRuntime.async(function getDefaultContainerIdAsync$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          if (ExpoContacts.getDefaultContainerIdentifierAsync) {\n            _context18.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n\n        case 2:\n          _context18.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.getDefaultContainerIdentifierAsync());\n\n        case 4:\n          return _context18.abrupt(\"return\", _context18.sent);\n\n        case 5:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getContainersAsync(containerQuery) {\n  return _regeneratorRuntime.async(function getContainersAsync$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          if (ExpoContacts.getContainersAsync) {\n            _context19.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getContainersAsync');\n\n        case 2:\n          _context19.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.getContainersAsync(containerQuery));\n\n        case 4:\n          return _context19.abrupt(\"return\", _context19.sent);\n\n        case 5:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          if (ExpoContacts.getPermissionsAsync) {\n            _context20.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n\n        case 2:\n          _context20.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.getPermissionsAsync());\n\n        case 4:\n          return _context20.abrupt(\"return\", _context20.sent);\n\n        case 5:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          if (ExpoContacts.requestPermissionsAsync) {\n            _context21.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n\n        case 2:\n          _context21.next = 4;\n          return _regeneratorRuntime.awrap(ExpoContacts.requestPermissionsAsync());\n\n        case 4:\n          return _context21.abrupt(\"return\", _context21.sent);\n\n        case 5:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var PHONE_NUMBERS = 'phoneNumbers';\nexport var EMAILS = 'emails';\nexport var ADDRESSES = 'addresses';\nexport var IMAGE = 'image';\nexport var RAW_IMAGE = 'rawImage';\nexport var NOTE = 'note';\nexport var BIRTHDAY = 'birthday';\nexport var NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport var NAME_PREFIX = 'namePrefix';\nexport var NAME_SUFFIX = 'nameSuffix';\nexport var PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport var PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport var PHONETIC_LAST_NAME = 'phoneticLastName';\nexport var SOCIAL_PROFILES = 'socialProfiles';\nexport var IM_ADDRESSES = 'instantMessageAddresses';\nexport var URLS = 'urlAddresses';\nexport var DATES = 'dates';\nexport var RAW_DATES = 'rawDates';\nexport var RELATIONSHIPS = 'relationships';\nexport var Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships'\n};\nexport var CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura'\n};\nexport var ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned'\n};\nexport var SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none'\n};\nexport var ContactTypes = {\n  Person: 'person',\n  Company: 'company'\n};","map":{"version":3,"mappings":"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","names":["PermissionStatus","UnavailabilityError","v4","uuidv4","ExpoContacts","isAvailableAsync","getContactsAsync","shareContactAsync","contactId","message","shareOptions","Platform","OS","writeContactToFileAsync","id","url","Share","share","contactQuery","getPagedContactsAsync","pageSize","nOptions","Error","getContactByIdAsync","fields","pageOffset","results","data","length","undefined","addContactAsync","contact","containerId","updateContactAsync","removeContactAsync","presentFormAsync","formOptions","adjustedOptions","console","log","isNew","addExistingGroupToContainerAsync","groupId","createGroupAsync","name","getDefaultContainerIdAsync","updateGroupNameAsync","groupName","removeGroupAsync","addExistingContactToGroupAsync","removeContactFromGroupAsync","getGroupsAsync","groupQuery","getDefaultContainerIdentifierAsync","getContainersAsync","containerQuery","getPermissionsAsync","requestPermissionsAsync","PHONE_NUMBERS","EMAILS","ADDRESSES","IMAGE","RAW_IMAGE","NOTE","BIRTHDAY","NON_GREGORIAN_BIRTHDAY","NAME_PREFIX","NAME_SUFFIX","PHONETIC_FIRST_NAME","PHONETIC_MIDDLE_NAME","PHONETIC_LAST_NAME","SOCIAL_PROFILES","IM_ADDRESSES","URLS","DATES","RAW_DATES","RELATIONSHIPS","Fields","ID","ContactType","Name","FirstName","MiddleName","LastName","MaidenName","NamePrefix","NameSuffix","Nickname","PhoneticFirstName","PhoneticMiddleName","PhoneticLastName","Birthday","NonGregorianBirthday","Emails","PhoneNumbers","Addresses","SocialProfiles","InstantMessageAddresses","UrlAddresses","Company","JobTitle","Department","ImageAvailable","Image","RawImage","ExtraNames","Note","Dates","Relationships","CalendarFormats","Gregorian","Buddhist","Chinese","Coptic","EthiopicAmeteMihret","EthiopicAmeteAlem","Hebrew","ISO8601","Indian","Islamic","IslamicCivil","Japanese","Persian","RepublicOfChina","IslamicTabular","IslamicUmmAlQura","ContainerTypes","Local","Exchange","CardDAV","Unassigned","SortTypes","UserDefault","None","ContactTypes","Person"],"sourceRoot":"","sources":["../src/Contacts.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport { Platform, Share } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExpoContacts from './ExpoContacts';\n\nexport type CalendarFormatType =\n  | typeof CalendarFormats.Gregorian\n  | typeof CalendarFormats.Buddhist\n  | typeof CalendarFormats.Chinese\n  | typeof CalendarFormats.Coptic\n  | typeof CalendarFormats.EthiopicAmeteMihret\n  | typeof CalendarFormats.EthiopicAmeteAlem\n  | typeof CalendarFormats.Hebrew\n  | typeof CalendarFormats.ISO8601\n  | typeof CalendarFormats.Indian\n  | typeof CalendarFormats.Islamic\n  | typeof CalendarFormats.IslamicCivil\n  | typeof CalendarFormats.Japanese\n  | typeof CalendarFormats.Persian\n  | typeof CalendarFormats.RepublicOfChina\n  | typeof CalendarFormats.IslamicTabular\n  | typeof CalendarFormats.IslamicUmmAlQura;\n\nexport type ContainerType =\n  | typeof ContainerTypes.Local\n  | typeof ContainerTypes.Exchange\n  | typeof ContainerTypes.CardDAV\n  | typeof ContainerTypes.Unassigned;\n\nexport type ContactType = typeof ContactTypes.Person | typeof ContactTypes.Company;\n\nexport type FieldType =\n  | typeof Fields.ID\n  | typeof Fields.ContactType\n  | typeof Fields.Name\n  | typeof Fields.FirstName\n  | typeof Fields.MiddleName\n  | typeof Fields.LastName\n  | typeof Fields.MaidenName\n  | typeof Fields.NamePrefix\n  | typeof Fields.NameSuffix\n  | typeof Fields.Nickname\n  | typeof Fields.PhoneticFirstName\n  | typeof Fields.PhoneticMiddleName\n  | typeof Fields.PhoneticLastName\n  | typeof Fields.Birthday\n  | typeof Fields.NonGregorianBirthday\n  | typeof Fields.Emails\n  | typeof Fields.PhoneNumbers\n  | typeof Fields.Addresses\n  | typeof Fields.SocialProfiles\n  | typeof Fields.InstantMessageAddresses\n  | typeof Fields.UrlAddresses\n  | typeof Fields.Company\n  | typeof Fields.JobTitle\n  | typeof Fields.Department\n  | typeof Fields.ImageAvailable\n  | typeof Fields.Image\n  | typeof Fields.RawImage\n  | typeof Fields.ExtraNames\n  | typeof Fields.Note\n  | typeof Fields.Dates\n  | typeof Fields.Relationships;\n\nexport type Date = {\n  day?: number;\n  month?: number;\n  year?: number;\n  id: string;\n  label: string;\n  format?: CalendarFormatType;\n};\n\nexport type Relationship = {\n  label: string;\n  name?: string;\n  id: string;\n};\n\nexport type Email = {\n  email?: string;\n  isPrimary?: boolean;\n  label: string;\n  id: string;\n};\n\nexport type PhoneNumber = {\n  number?: string;\n  isPrimary?: boolean;\n  digits?: string;\n  countryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type Address = {\n  street?: string;\n  city?: string;\n  country?: string;\n  region?: string;\n  neighborhood?: string;\n  postalCode?: string;\n  poBox?: string;\n  isoCountryCode?: string;\n  label: string;\n  id: string;\n};\n\nexport type SocialProfile = {\n  service?: string;\n  localizedProfile?: string;\n  url?: string;\n  username?: string;\n  userId?: string;\n  label: string;\n  id: string;\n};\n\nexport type InstantMessageAddress = {\n  service?: string;\n  username?: string;\n  localizedService?: string;\n  label: string;\n  id: string;\n};\n\nexport type UrlAddress = {\n  label: string;\n  url?: string;\n  id: string;\n};\n\nexport type Image = {\n  uri?: string;\n  width?: number;\n  height?: number;\n  base64?: string;\n};\n\nexport type Contact = {\n  id: string;\n  contactType: ContactType;\n  name: string;\n  firstName?: string;\n  middleName?: string;\n  lastName?: string;\n  maidenName?: string;\n  namePrefix?: string;\n  nameSuffix?: string;\n  nickname?: string;\n  phoneticFirstName?: string;\n  phoneticMiddleName?: string;\n  phoneticLastName?: string;\n  company?: string;\n  jobTitle?: string;\n  department?: string;\n  note?: string;\n  imageAvailable?: boolean;\n  image?: Image;\n  rawImage?: Image;\n  birthday?: Date;\n  dates?: Date[];\n  relationships?: Relationship[];\n  emails?: Email[];\n  phoneNumbers?: PhoneNumber[];\n  addresses?: Address[];\n  instantMessageAddresses?: InstantMessageAddress[];\n  urlAddresses?: UrlAddress[];\n\n  nonGregorianBirthday?: Date;\n  socialProfiles?: SocialProfile[];\n};\n\nexport type ContactResponse = {\n  data: Contact[];\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n};\n\nexport type ContactSort =\n  | typeof SortTypes.UserDefault\n  | typeof SortTypes.FirstName\n  | typeof SortTypes.LastName\n  | typeof SortTypes.None;\n\nexport type ContactQuery = {\n  pageSize?: number;\n  pageOffset?: number;\n  fields?: FieldType[];\n  sort?: ContactSort;\n  name?: string;\n  id?: string | string[];\n  groupId?: string;\n  containerId?: string;\n  rawContacts?: boolean;\n};\n\nexport type FormOptions = {\n  displayedPropertyKeys?: FieldType[];\n  message?: string;\n  alternateName?: string;\n  allowsEditing?: boolean;\n  allowsActions?: boolean;\n  shouldShowLinkedContacts?: boolean;\n  isNew?: boolean;\n  cancelButtonTitle?: string;\n  preventAnimation?: boolean;\n  groupId?: string;\n};\n\nexport type GroupQuery = {\n  groupId?: string;\n  groupName?: string;\n  containerId?: string;\n};\n\nexport type Group = {\n  name?: string;\n  id?: string;\n};\n\nexport type ContainerQuery = {\n  contactId?: string;\n  groupId?: string;\n  containerId?: string | string[];\n};\n\nexport type Container = {\n  name: string;\n  id: string;\n  type: ContainerType;\n};\n\nexport { PermissionStatus, PermissionResponse };\n\n/**\n * Returns whether the Contacts API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Contacts API is available on the current device. Currently this resolves to `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoContacts.getContactsAsync;\n}\n\nexport async function shareContactAsync(\n  contactId: string,\n  message: string,\n  shareOptions: object = {}\n): Promise<any> {\n  if (Platform.OS === 'ios') {\n    const url = await writeContactToFileAsync({\n      id: contactId,\n    });\n    return await Share.share(\n      {\n        url,\n        message,\n      },\n      shareOptions\n    );\n  } else if (!ExpoContacts.shareContactAsync) {\n    throw new UnavailabilityError('Contacts', 'shareContactAsync');\n  }\n  return await ExpoContacts.shareContactAsync(contactId, message);\n}\n\nexport async function getContactsAsync(contactQuery: ContactQuery = {}): Promise<ContactResponse> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n  return await ExpoContacts.getContactsAsync(contactQuery);\n}\n\nexport async function getPagedContactsAsync(\n  contactQuery: ContactQuery = {}\n): Promise<ContactResponse> {\n  const { pageSize, ...nOptions } = contactQuery;\n\n  if (pageSize && pageSize <= 0) {\n    throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');\n  }\n\n  return await getContactsAsync({\n    ...nOptions,\n    pageSize,\n  });\n}\n\nexport async function getContactByIdAsync(\n  id: string,\n  fields?: FieldType[]\n): Promise<Contact | undefined> {\n  if (!ExpoContacts.getContactsAsync) {\n    throw new UnavailabilityError('Contacts', 'getContactsAsync');\n  }\n\n  if (id == null) {\n    throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');\n  } else {\n    const results = await ExpoContacts.getContactsAsync({\n      pageSize: 1,\n      pageOffset: 0,\n      fields,\n      id,\n    });\n    if (results && results.data && results.data.length > 0) {\n      return results.data[0];\n    }\n  }\n  return undefined;\n}\n\nexport async function addContactAsync(contact: Contact, containerId?: string): Promise<string> {\n  if (!ExpoContacts.addContactAsync) {\n    throw new UnavailabilityError('Contacts', 'addContactAsync');\n  }\n  return await ExpoContacts.addContactAsync(contact, containerId);\n}\n\nexport async function updateContactAsync(contact: Contact): Promise<string> {\n  if (!ExpoContacts.updateContactAsync) {\n    throw new UnavailabilityError('Contacts', 'updateContactAsync');\n  }\n  return await ExpoContacts.updateContactAsync(contact);\n}\n\nexport async function removeContactAsync(contactId: string): Promise<any> {\n  if (!ExpoContacts.removeContactAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactAsync');\n  }\n  return await ExpoContacts.removeContactAsync(contactId);\n}\n\nexport async function writeContactToFileAsync(\n  contactQuery: ContactQuery = {}\n): Promise<string | undefined> {\n  if (!ExpoContacts.writeContactToFileAsync) {\n    throw new UnavailabilityError('Contacts', 'writeContactToFileAsync');\n  }\n  return await ExpoContacts.writeContactToFileAsync(contactQuery);\n}\n\nexport async function presentFormAsync(\n  contactId?: string | null,\n  contact?: Contact | null,\n  formOptions: FormOptions = {}\n): Promise<any> {\n  if (!ExpoContacts.presentFormAsync) {\n    throw new UnavailabilityError('Contacts', 'presentFormAsync');\n  }\n  if (Platform.OS === 'ios') {\n    const adjustedOptions = formOptions;\n\n    if (contactId) {\n      if (contact) {\n        contact = undefined;\n        console.log(\n          'Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.'\n        );\n      }\n      if (adjustedOptions.isNew !== undefined) {\n        console.log(\n          'Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`'\n        );\n      }\n    }\n    return await ExpoContacts.presentFormAsync(contactId, contact, adjustedOptions);\n  } else {\n    return await ExpoContacts.presentFormAsync(contactId, contact, formOptions);\n  }\n}\n\n// iOS Only\n\nexport async function addExistingGroupToContainerAsync(\n  groupId: string,\n  containerId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingGroupToContainerAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');\n  }\n\n  return await ExpoContacts.addExistingGroupToContainerAsync(groupId, containerId);\n}\n\nexport async function createGroupAsync(name?: string, containerId?: string): Promise<string> {\n  if (!ExpoContacts.createGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'createGroupAsync');\n  }\n\n  name = name || uuidv4();\n  if (!containerId) {\n    containerId = await getDefaultContainerIdAsync();\n  }\n\n  return await ExpoContacts.createGroupAsync(name, containerId);\n}\n\nexport async function updateGroupNameAsync(groupName: string, groupId: string): Promise<any> {\n  if (!ExpoContacts.updateGroupNameAsync) {\n    throw new UnavailabilityError('Contacts', 'updateGroupNameAsync');\n  }\n\n  return await ExpoContacts.updateGroupNameAsync(groupName, groupId);\n}\n\nexport async function removeGroupAsync(groupId: string): Promise<any> {\n  if (!ExpoContacts.removeGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeGroupAsync');\n  }\n\n  return await ExpoContacts.removeGroupAsync(groupId);\n}\n\nexport async function addExistingContactToGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.addExistingContactToGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');\n  }\n\n  return await ExpoContacts.addExistingContactToGroupAsync(contactId, groupId);\n}\n\nexport async function removeContactFromGroupAsync(\n  contactId: string,\n  groupId: string\n): Promise<any> {\n  if (!ExpoContacts.removeContactFromGroupAsync) {\n    throw new UnavailabilityError('Contacts', 'removeContactFromGroupAsync');\n  }\n\n  return await ExpoContacts.removeContactFromGroupAsync(contactId, groupId);\n}\n\nexport async function getGroupsAsync(groupQuery: GroupQuery): Promise<Group[]> {\n  if (!ExpoContacts.getGroupsAsync) {\n    throw new UnavailabilityError('Contacts', 'getGroupsAsync');\n  }\n\n  return await ExpoContacts.getGroupsAsync(groupQuery);\n}\n\nexport async function getDefaultContainerIdAsync(): Promise<string> {\n  if (!ExpoContacts.getDefaultContainerIdentifierAsync) {\n    throw new UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');\n  }\n\n  return await ExpoContacts.getDefaultContainerIdentifierAsync();\n}\n\nexport async function getContainersAsync(containerQuery: ContainerQuery): Promise<Container[]> {\n  if (!ExpoContacts.getContainersAsync) {\n    throw new UnavailabilityError('Contacts', 'getContainersAsync');\n  }\n\n  return await ExpoContacts.getContainersAsync(containerQuery);\n}\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.getPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'getPermissionsAsync');\n  }\n\n  return await ExpoContacts.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoContacts.requestPermissionsAsync) {\n    throw new UnavailabilityError('Contacts', 'requestPermissionsAsync');\n  }\n\n  return await ExpoContacts.requestPermissionsAsync();\n}\n\n// Legacy\nexport const PHONE_NUMBERS = 'phoneNumbers';\nexport const EMAILS = 'emails';\nexport const ADDRESSES = 'addresses';\nexport const IMAGE = 'image';\nexport const RAW_IMAGE = 'rawImage';\nexport const NOTE = 'note';\nexport const BIRTHDAY = 'birthday';\nexport const NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';\nexport const NAME_PREFIX = 'namePrefix';\nexport const NAME_SUFFIX = 'nameSuffix';\nexport const PHONETIC_FIRST_NAME = 'phoneticFirstName';\nexport const PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';\nexport const PHONETIC_LAST_NAME = 'phoneticLastName';\nexport const SOCIAL_PROFILES = 'socialProfiles';\nexport const IM_ADDRESSES = 'instantMessageAddresses';\nexport const URLS = 'urlAddresses';\nexport const DATES = 'dates';\nexport const RAW_DATES = 'rawDates';\nexport const RELATIONSHIPS = 'relationships';\n\nexport const Fields = {\n  ID: 'id',\n  ContactType: 'contactType',\n  Name: 'name',\n  FirstName: 'firstName',\n  MiddleName: 'middleName',\n  LastName: 'lastName',\n  MaidenName: 'maidenName',\n  NamePrefix: 'namePrefix',\n  NameSuffix: 'nameSuffix',\n  Nickname: 'nickname',\n  PhoneticFirstName: 'phoneticFirstName',\n  PhoneticMiddleName: 'phoneticMiddleName',\n  PhoneticLastName: 'phoneticLastName',\n  Birthday: 'birthday',\n  NonGregorianBirthday: 'nonGregorianBirthday',\n  Emails: 'emails',\n  PhoneNumbers: 'phoneNumbers',\n  Addresses: 'addresses',\n  SocialProfiles: 'socialProfiles',\n  InstantMessageAddresses: 'instantMessageAddresses',\n  UrlAddresses: 'urlAddresses',\n  Company: 'company',\n  JobTitle: 'jobTitle',\n  Department: 'department',\n  ImageAvailable: 'imageAvailable',\n  Image: 'image',\n  RawImage: 'rawImage',\n  ExtraNames: 'extraNames',\n  Note: 'note',\n  Dates: 'dates',\n  Relationships: 'relationships',\n};\n\nexport const CalendarFormats = {\n  Gregorian: 'gregorian',\n  Buddhist: 'buddhist',\n  Chinese: 'chinese',\n  Coptic: 'coptic',\n  EthiopicAmeteMihret: 'ethiopicAmeteMihret',\n  EthiopicAmeteAlem: 'ethiopicAmeteAlem',\n  Hebrew: 'hebrew',\n  ISO8601: 'iso8601',\n  Indian: 'indian',\n  Islamic: 'islamic',\n  IslamicCivil: 'islamicCivil',\n  Japanese: 'japanese',\n  Persian: 'persian',\n  RepublicOfChina: 'republicOfChina',\n  IslamicTabular: 'islamicTabular',\n  IslamicUmmAlQura: 'islamicUmmAlQura',\n};\n\nexport const ContainerTypes = {\n  Local: 'local',\n  Exchange: 'exchange',\n  CardDAV: 'cardDAV',\n  Unassigned: 'unassigned',\n};\n\nexport const SortTypes = {\n  UserDefault: 'userDefault',\n  FirstName: 'firstName',\n  LastName: 'lastName',\n  None: 'none',\n};\n\nexport const ContactTypes = {\n  Person: 'person',\n  Company: 'company',\n};\n"]},"metadata":{},"sourceType":"module"}
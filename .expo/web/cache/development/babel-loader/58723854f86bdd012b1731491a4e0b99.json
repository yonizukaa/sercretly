{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useRoute } from \"@react-navigation/native\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { auth, db } from \"../firebase\";\nimport GlobalContext from \"../context/Context\";\nimport { addDoc, collection, doc, onSnapshot, setDoc, updateDoc } from \"@firebase/firestore\";\nimport { Actions, Bubble, GiftedChat, InputToolbar } from \"react-native-gifted-chat\";\nimport { pickImage, uploadImage } from \"../utils\";\nvar randomId = nanoid();\nexport default function Chat() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      roomHash = _useState2[0],\n      setRoomHash = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedImageView = _useState8[0],\n      setSeletedImageView = _useState8[1];\n\n  var _useContext = useContext(GlobalContext),\n      colors = _useContext.theme.colors;\n\n  var currentUser = auth.currentUser;\n  var route = useRoute();\n  var room = route.params.room;\n  var selectedImage = route.params.image;\n  var userB = route.params.user;\n  var senderUser = currentUser.photoURL ? {\n    name: currentUser.displayName,\n    _id: currentUser.uid,\n    avatar: currentUser.photoURL\n  } : {\n    name: currentUser.displayName,\n    _id: currentUser.uid\n  };\n  var roomId = room ? room.id : randomId;\n  var roomRef = doc(db, \"rooms\", roomId);\n  var roomMessagesRef = collection(db, \"rooms\", roomId, \"messages\");\n  useEffect(function () {\n    (function _callee() {\n      var currUserData, userBData, roomData, emailHash;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (room) {\n                _context.next = 14;\n                break;\n              }\n\n              currUserData = {\n                displayName: currentUser.displayName,\n                email: currentUser.email\n              };\n\n              if (currentUser.photoURL) {\n                currUserData.photoURL = currentUser.photoURL;\n              }\n\n              userBData = {\n                displayName: userB.contactName || userB.displayName || \"\",\n                email: userB.email\n              };\n\n              if (userB.photoURL) {\n                userBData.photoURL = userB.photoURL;\n              }\n\n              roomData = {\n                participants: [currUserData, userBData],\n                participantsArray: [currentUser.email, userB.email]\n              };\n              _context.prev = 6;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(setDoc(roomRef, roomData));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](6);\n              console.log(_context.t0);\n\n            case 14:\n              emailHash = currentUser.email + \":\" + userB.email;\n              setRoomHash(emailHash);\n\n              if (!(selectedImage && selectedImage.uri)) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(sendImage(selectedImage.uri, emailHash));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[6, 11]], Promise);\n    })();\n  }, []);\n  useEffect(function () {\n    var unsubscribe = onSnapshot(roomMessagesRef, function (querySnapshot) {\n      var messagesFirestore = querySnapshot.docChanges().filter(function (_ref) {\n        var type = _ref.type;\n        return type === \"added\";\n      }).map(function (_ref2) {\n        var doc = _ref2.doc;\n        var message = doc.data();\n        return _objectSpread(_objectSpread({}, message), {}, {\n          createdAt: message.createdAt.toDate()\n        });\n      }).sort(function (a, b) {\n        return b.createdAt.getTime() - a.createdAt.getTime();\n      });\n      appendMessages(messagesFirestore);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var appendMessages = useCallback(function (messages) {\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n  }, [messages]);\n\n  function onSend() {\n    var messages,\n        writes,\n        lastMessage,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function onSend$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            messages = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];\n            writes = messages.map(function (m) {\n              return addDoc(roomMessagesRef, m);\n            });\n            lastMessage = messages[messages.length - 1];\n            writes.push(updateDoc(roomRef, {\n              lastMessage: lastMessage\n            }));\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(Promise.all(writes));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendImage(uri, roomPath) {\n    var _await$uploadImage, url, fileName, message, lastMessage;\n\n    return _regeneratorRuntime.async(function sendImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(uploadImage(uri, \"images/rooms/\" + (roomPath || roomHash)));\n\n          case 2:\n            _await$uploadImage = _context3.sent;\n            url = _await$uploadImage.url;\n            fileName = _await$uploadImage.fileName;\n            message = {\n              _id: fileName,\n              text: \"\",\n              createdAt: new Date(),\n              user: senderUser,\n              image: url\n            };\n            lastMessage = _objectSpread(_objectSpread({}, message), {}, {\n              text: \"Image\"\n            });\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(Promise.all([addDoc(roomMessagesRef, message), updateDoc(roomRef, {\n              lastMessage: lastMessage\n            })]));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handlePhotoPicker() {\n    var result;\n    return _regeneratorRuntime.async(function handlePhotoPicker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(pickImage());\n\n          case 2:\n            result = _context4.sent;\n\n            if (result.cancelled) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(sendImage(result.uri));\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(ImageBackground, {\n    resizeMode: \"cover\",\n    source: require(\"../assets/chatbg.png\"),\n    style: {\n      flex: 1\n    }\n  }, React.createElement(GiftedChat, {\n    onSend: onSend,\n    messages: messages,\n    user: senderUser,\n    renderAvatar: null,\n    renderActions: function renderActions(props) {\n      return React.createElement(Actions, _extends({}, props, {\n        containerStyle: {\n          position: \"absolute\",\n          right: 50,\n          bottom: 5,\n          zIndex: 9999\n        },\n        onPressActionButton: handlePhotoPicker,\n        icon: function icon() {\n          return React.createElement(Ionicons, {\n            name: \"camera\",\n            size: 30,\n            color: colors.iconGray\n          });\n        }\n      }));\n    },\n    timeTextStyle: {\n      right: {\n        color: colors.iconGray\n      }\n    },\n    renderSend: function renderSend(props) {\n      var text = props.text,\n          messageIdGenerator = props.messageIdGenerator,\n          user = props.user,\n          onSend = props.onSend;\n      return React.createElement(TouchableOpacity, {\n        style: {\n          height: 40,\n          width: 40,\n          borderRadius: 40,\n          backgroundColor: colors.primary,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginBottom: 5\n        },\n        onPress: function onPress() {\n          if (text && onSend) {\n            onSend({\n              text: text.trim(),\n              user: user,\n              _id: messageIdGenerator()\n            }, true);\n          }\n        }\n      }, React.createElement(Ionicons, {\n        name: \"send\",\n        size: 20,\n        color: colors.white\n      }));\n    },\n    renderInputToolbar: function renderInputToolbar(props) {\n      return React.createElement(InputToolbar, _extends({}, props, {\n        containerStyle: {\n          marginLeft: 10,\n          marginRight: 10,\n          marginBottom: 2,\n          borderRadius: 20,\n          paddingTop: 5\n        }\n      }));\n    },\n    renderBubble: function renderBubble(props) {\n      return React.createElement(Bubble, _extends({}, props, {\n        textStyle: {\n          right: {\n            color: colors.text\n          }\n        },\n        wrapperStyle: {\n          left: {\n            backgroundColor: colors.white\n          },\n          right: {\n            backgroundColor: colors.tertiary\n          }\n        }\n      }));\n    },\n    renderMessageImage: function renderMessageImage(props) {\n      return React.createElement(View, {\n        style: {\n          borderRadius: 15,\n          padding: 2\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          setModalVisible(true);\n          setSeletedImageView(props.currentMessage.image);\n        }\n      }, React.createElement(Image, {\n        resizeMode: \"contain\",\n        style: {\n          width: 200,\n          height: 200,\n          padding: 6,\n          borderRadius: 15,\n          resizeMode: \"cover\"\n        },\n        source: {\n          uri: props.currentMessage.image\n        }\n      }), selectedImageView ? React.createElement(ImageView, {\n        imageIndex: 0,\n        visible: modalVisible,\n        onRequestClose: function onRequestClose() {\n          return setModalVisible(false);\n        },\n        images: [{\n          uri: selectedImageView\n        }]\n      }) : null));\n    }\n  }));\n}","map":{"version":3,"names":["useRoute","nanoid","React","useCallback","useContext","useEffect","useState","Ionicons","auth","db","GlobalContext","addDoc","collection","doc","onSnapshot","setDoc","updateDoc","Actions","Bubble","GiftedChat","InputToolbar","pickImage","uploadImage","randomId","Chat","roomHash","setRoomHash","messages","setMessages","modalVisible","setModalVisible","selectedImageView","setSeletedImageView","colors","theme","currentUser","route","room","params","selectedImage","image","userB","user","senderUser","photoURL","name","displayName","_id","uid","avatar","roomId","id","roomRef","roomMessagesRef","currUserData","email","userBData","contactName","roomData","participants","participantsArray","console","log","emailHash","uri","sendImage","unsubscribe","querySnapshot","messagesFirestore","docChanges","filter","type","map","message","data","createdAt","toDate","sort","a","b","getTime","appendMessages","previousMessages","append","onSend","writes","m","lastMessage","length","push","Promise","all","roomPath","url","fileName","text","Date","handlePhotoPicker","result","cancelled","require","flex","props","position","right","bottom","zIndex","iconGray","color","messageIdGenerator","height","width","borderRadius","backgroundColor","primary","alignItems","justifyContent","marginBottom","trim","white","marginLeft","marginRight","paddingTop","left","tertiary","padding","currentMessage","resizeMode"],"sources":["C:/Users/johan/OneDrive/Bureau/Appmobile/Secretly/wp-clone-starter/screens/Chat.js"],"sourcesContent":["// @refresh reset\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport \"react-native-get-random-values\";\r\nimport { nanoid } from \"nanoid\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  ImageBackground,\r\n  TouchableOpacity,\r\n  Image,\r\n} from \"react-native\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { auth, db } from \"../firebase\";\r\nimport GlobalContext from \"../context/Context\";\r\nimport {\r\n  addDoc,\r\n  collection,\r\n  doc,\r\n  onSnapshot,\r\n  setDoc,\r\n  updateDoc,\r\n} from \"@firebase/firestore\";\r\nimport {\r\n  Actions,\r\n  Bubble,\r\n  GiftedChat,\r\n  InputToolbar,\r\n} from \"react-native-gifted-chat\";\r\nimport { pickImage, uploadImage } from \"../utils\";\r\n//import ImageView from \"react-native-image-viewing\";\r\n\r\nconst randomId = nanoid();\r\n\r\nexport default function Chat() {\r\n  const [roomHash, setRoomHash] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [selectedImageView, setSeletedImageView] = useState(\"\");\r\n  const {\r\n    theme: { colors },\r\n  } = useContext(GlobalContext);\r\n  const { currentUser } = auth;\r\n  const route = useRoute();\r\n  const room = route.params.room;\r\n  const selectedImage = route.params.image;\r\n  const userB = route.params.user;\r\n\r\n  const senderUser = currentUser.photoURL\r\n    ? {\r\n        name: currentUser.displayName,\r\n        _id: currentUser.uid,\r\n        avatar: currentUser.photoURL,\r\n      }\r\n    : { name: currentUser.displayName, _id: currentUser.uid };\r\n\r\n  const roomId = room ? room.id : randomId;\r\n\r\n  const roomRef = doc(db, \"rooms\", roomId);\r\n  const roomMessagesRef = collection(db, \"rooms\", roomId, \"messages\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!room) {\r\n        const currUserData = {\r\n          displayName: currentUser.displayName,\r\n          email: currentUser.email,\r\n        };\r\n        if (currentUser.photoURL) {\r\n          currUserData.photoURL = currentUser.photoURL;\r\n        }\r\n        const userBData = {\r\n          displayName: userB.contactName || userB.displayName || \"\",\r\n          email: userB.email,\r\n        };\r\n        if (userB.photoURL) {\r\n          userBData.photoURL = userB.photoURL;\r\n        }\r\n        const roomData = {\r\n          participants: [currUserData, userBData],\r\n          participantsArray: [currentUser.email, userB.email],\r\n        };\r\n        try {\r\n          await setDoc(roomRef, roomData);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n      const emailHash = `${currentUser.email}:${userB.email}`;\r\n      setRoomHash(emailHash);\r\n      if (selectedImage && selectedImage.uri) {\r\n        await sendImage(selectedImage.uri, emailHash);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onSnapshot(roomMessagesRef, (querySnapshot) => {\r\n      const messagesFirestore = querySnapshot\r\n        .docChanges()\r\n        .filter(({ type }) => type === \"added\")\r\n        .map(({ doc }) => {\r\n          const message = doc.data();\r\n          return { ...message, createdAt: message.createdAt.toDate() };\r\n        })\r\n        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n      appendMessages(messagesFirestore);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const appendMessages = useCallback(\r\n    (messages) => {\r\n      setMessages((previousMessages) =>\r\n        GiftedChat.append(previousMessages, messages)\r\n      );\r\n    },\r\n    [messages]\r\n  );\r\n\r\n  async function onSend(messages = []) {\r\n    const writes = messages.map((m) => addDoc(roomMessagesRef, m));\r\n    const lastMessage = messages[messages.length - 1];\r\n    writes.push(updateDoc(roomRef, { lastMessage }));\r\n    await Promise.all(writes);\r\n  }\r\n\r\n  async function sendImage(uri, roomPath) {\r\n    const { url, fileName } = await uploadImage(\r\n      uri,\r\n      `images/rooms/${roomPath || roomHash}`\r\n    );\r\n    const message = {\r\n      _id: fileName,\r\n      text: \"\",\r\n      createdAt: new Date(),\r\n      user: senderUser,\r\n      image: url,\r\n    };\r\n    const lastMessage = { ...message, text: \"Image\" };\r\n    await Promise.all([\r\n      addDoc(roomMessagesRef, message),\r\n      updateDoc(roomRef, { lastMessage }),\r\n    ]);\r\n  }\r\n\r\n  async function handlePhotoPicker() {\r\n    const result = await pickImage();\r\n    if (!result.cancelled) {\r\n      await sendImage(result.uri);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ImageBackground\r\n      resizeMode=\"cover\"\r\n      source={require(\"../assets/chatbg.png\")}\r\n      style={{ flex: 1 }}\r\n    >\r\n      <GiftedChat\r\n        onSend={onSend}\r\n        messages={messages}\r\n        user={senderUser}\r\n        renderAvatar={null}\r\n        renderActions={(props) => (\r\n          <Actions\r\n            {...props}\r\n            containerStyle={{\r\n              position: \"absolute\",\r\n              right: 50,\r\n              bottom: 5,\r\n              zIndex: 9999,\r\n            }}\r\n            onPressActionButton={handlePhotoPicker}\r\n            icon={() => (\r\n              <Ionicons name=\"camera\" size={30} color={colors.iconGray} />\r\n            )}\r\n          />\r\n        )}\r\n        timeTextStyle={{ right: { color: colors.iconGray } }}\r\n        renderSend={(props) => {\r\n          const { text, messageIdGenerator, user, onSend } = props;\r\n          return (\r\n            <TouchableOpacity\r\n              style={{\r\n                height: 40,\r\n                width: 40,\r\n                borderRadius: 40,\r\n                backgroundColor: colors.primary,\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginBottom: 5,\r\n              }}\r\n              onPress={() => {\r\n                if (text && onSend) {\r\n                  onSend(\r\n                    {\r\n                      text: text.trim(),\r\n                      user,\r\n                      _id: messageIdGenerator(),\r\n                    },\r\n                    true\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              <Ionicons name=\"send\" size={20} color={colors.white} />\r\n            </TouchableOpacity>\r\n          );\r\n        }}\r\n        renderInputToolbar={(props) => (\r\n          <InputToolbar\r\n            {...props}\r\n            containerStyle={{\r\n              marginLeft: 10,\r\n              marginRight: 10,\r\n              marginBottom: 2,\r\n              borderRadius: 20,\r\n              paddingTop: 5,\r\n            }}\r\n          />\r\n        )}\r\n        renderBubble={(props) => (\r\n          <Bubble\r\n            {...props}\r\n            textStyle={{ right: { color: colors.text } }}\r\n            wrapperStyle={{\r\n              left: {\r\n                backgroundColor: colors.white,\r\n              },\r\n              right: {\r\n                backgroundColor: colors.tertiary,\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n        renderMessageImage={(props) => {\r\n          return (\r\n            <View style={{ borderRadius: 15, padding: 2 }}>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  setModalVisible(true);\r\n                  setSeletedImageView(props.currentMessage.image);\r\n                }}\r\n              >\r\n                <Image\r\n                  resizeMode=\"contain\"\r\n                  style={{\r\n                    width: 200,\r\n                    height: 200,\r\n                    padding: 6,\r\n                    borderRadius: 15,\r\n                    resizeMode: \"cover\",\r\n                  }}\r\n                  source={{ uri: props.currentMessage.image }}\r\n                />\r\n                {selectedImageView ? (\r\n                  <ImageView\r\n                    imageIndex={0}\r\n                    visible={modalVisible}\r\n                    onRequestClose={() => setModalVisible(false)}\r\n                    images={[{ uri: selectedImageView }]}\r\n                  />\r\n                ) : null}\r\n              </TouchableOpacity>\r\n            </View>\r\n          );\r\n        }}\r\n      />\r\n    </ImageBackground>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
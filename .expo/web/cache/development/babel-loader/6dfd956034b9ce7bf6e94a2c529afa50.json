{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Context from \"./Context\";\nimport { theme } from \"../utils\";\nexport default function ContextWrapper(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      rooms = _useState2[0],\n      setRooms = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      unfilteredRooms = _useState4[0],\n      setUnfilteredRooms = _useState4[1];\n\n  return React.createElement(Context.Provider, {\n    value: {\n      theme: theme,\n      rooms: rooms,\n      setRooms: setRooms,\n      unfilteredRooms: unfilteredRooms,\n      setUnfilteredRooms: setUnfilteredRooms\n    }\n  }, props.children);\n}","map":{"version":3,"names":["React","useState","Context","theme","ContextWrapper","props","rooms","setRooms","unfilteredRooms","setUnfilteredRooms","children"],"sources":["C:/Users/johan/OneDrive/Bureau/Appmobile/Secretly/secretly/context/ContextWrapper.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Context from \"./Context\";\r\nimport { theme } from \"../utils\";\r\n\r\nexport default function ContextWrapper(props) {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [unfilteredRooms, setUnfilteredRooms] = useState([]);\r\n  return (\r\n    <Context.Provider\r\n      value={{ theme, rooms, setRooms, unfilteredRooms, setUnfilteredRooms }}\r\n    >\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP;AACA,SAASC,KAAT;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;EAC5C,gBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOK,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAA8CN,QAAQ,CAAC,EAAD,CAAtD;EAAA;EAAA,IAAOO,eAAP;EAAA,IAAwBC,kBAAxB;;EACA,OACE,oBAAC,OAAD,CAAS,QAAT;IACE,KAAK,EAAE;MAAEN,KAAK,EAALA,KAAF;MAASG,KAAK,EAALA,KAAT;MAAgBC,QAAQ,EAARA,QAAhB;MAA0BC,eAAe,EAAfA,eAA1B;MAA2CC,kBAAkB,EAAlBA;IAA3C;EADT,GAGGJ,KAAK,CAACK,QAHT,CADF;AAOD"},"metadata":{},"sourceType":"module"}
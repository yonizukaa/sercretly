{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"./firebase\";\nexport function pickImage() {\n  var result;\n  return _regeneratorRuntime.async(function pickImage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          result = ImagePicker.launchCameraAsync();\n          return _context.abrupt(\"return\", result);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function askForPermission() {\n  var _await$ImagePicker$re, status;\n\n  return _regeneratorRuntime.async(function askForPermission$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n        case 2:\n          _await$ImagePicker$re = _context2.sent;\n          status = _await$ImagePicker$re.status;\n          return _context2.abrupt(\"return\", status);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function uploadImage(uri, path, fName) {\n  var blob, fileName, imageRef, snapshot, url;\n  return _regeneratorRuntime.async(function uploadImage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n\n            xhr.onload = function () {\n              resolve(xhr.response);\n            };\n\n            xhr.onerror = function (e) {\n              console.log(e);\n              reject(new TypeError(\"Network request failed\"));\n            };\n\n            xhr.responseType = \"blob\";\n            xhr.open(\"GET\", uri, true);\n            xhr.send(null);\n          }));\n\n        case 2:\n          blob = _context3.sent;\n          fileName = fName || nanoid();\n          imageRef = ref(storage, path + \"/\" + fileName + \".jpeg\");\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(uploadBytes(imageRef, blob, {\n            contentType: \"image/jpeg\"\n          }));\n\n        case 7:\n          snapshot = _context3.sent;\n          blob.close();\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap(getDownloadURL(snapshot.ref));\n\n        case 11:\n          url = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            url: url,\n            fileName: fileName\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar palette = {\n  tealGreen: \"#128c7e\",\n  tealPurpleDark: \"#3D0359\",\n  purple: \"#B902FA\",\n  lime: \"#dcf8c6\",\n  skyblue: \"#34b7f1\",\n  smokeWhite: \"#ece5dd\",\n  white: \"white\",\n  gray: \"#3C3C3C\",\n  lightGray: \"#757575\",\n  iconGray: \"#717171\"\n};\nexport var theme = {\n  colors: {\n    background: palette.smokeWhite,\n    foreground: palette.tealPurpleDark,\n    primary: palette.tealGreen,\n    tertiary: palette.lime,\n    secondary: palette.purple,\n    white: palette.white,\n    text: palette.gray,\n    secondaryText: palette.lightGray,\n    iconGray: palette.iconGray\n  }\n};","map":{"version":3,"names":["ImagePicker","nanoid","ref","uploadBytes","getDownloadURL","storage","pickImage","result","launchCameraAsync","askForPermission","requestCameraPermissionsAsync","status","uploadImage","uri","path","fName","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","console","log","TypeError","responseType","open","send","blob","fileName","imageRef","contentType","snapshot","close","url","palette","tealGreen","tealPurpleDark","purple","lime","skyblue","smokeWhite","white","gray","lightGray","iconGray","theme","colors","background","foreground","primary","tertiary","secondary","text","secondaryText"],"sources":["C:/Users/johan/OneDrive/Bureau/Appmobile/Secretly/wp-clone-starter/utils.js"],"sourcesContent":["import * as ImagePicker from \"expo-image-picker\";\r\nimport \"react-native-get-random-values\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport { storage } from \"./firebase\";\r\n\r\nexport async function pickImage() {\r\n  let result = ImagePicker.launchCameraAsync();\r\n  return result;\r\n}\r\nexport async function askForPermission() {\r\n  const { status } = await ImagePicker.requestCameraPermissionsAsync();\r\n  return status;\r\n}\r\n\r\nexport async function uploadImage(uri, path, fName) {\r\n  // Why are we using XMLHttpRequest? See:\r\n  // https://github.com/expo/expo/issues/2402#issuecomment-443726662\r\n  const blob = await new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = function () {\r\n      resolve(xhr.response);\r\n    };\r\n    xhr.onerror = function (e) {\r\n      console.log(e);\r\n      reject(new TypeError(\"Network request failed\"));\r\n    };\r\n    xhr.responseType = \"blob\";\r\n    xhr.open(\"GET\", uri, true);\r\n    xhr.send(null);\r\n  });\r\n\r\n  const fileName = fName || nanoid();\r\n  const imageRef = ref(storage, `${path}/${fileName}.jpeg`);\r\n\r\n  const snapshot = await uploadBytes(imageRef, blob, {\r\n    contentType: \"image/jpeg\",\r\n  });\r\n\r\n  blob.close();\r\n\r\n  const url = await getDownloadURL(snapshot.ref);\r\n\r\n  return { url, fileName };\r\n}\r\n\r\nconst palette = {\r\n  tealGreen: \"#128c7e\",\r\n  tealPurpleDark: \"#3D0359\",\r\n  purple: \"#B902FA\",\r\n  lime: \"#dcf8c6\",\r\n  skyblue: \"#34b7f1\",\r\n  smokeWhite: \"#ece5dd\",\r\n  white: \"white\",\r\n  gray: \"#3C3C3C\",\r\n  lightGray: \"#757575\",\r\n  iconGray: \"#717171\",\r\n};\r\n\r\nexport const theme = {\r\n  colors: {\r\n    background: palette.smokeWhite,\r\n    foreground: palette.tealPurpleDark,\r\n    primary: palette.tealGreen,\r\n    tertiary: palette.lime,\r\n    secondary: palette.purple,\r\n    white: palette.white,\r\n    text: palette.gray,\r\n    secondaryText: palette.lightGray,\r\n    iconGray: palette.iconGray,\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
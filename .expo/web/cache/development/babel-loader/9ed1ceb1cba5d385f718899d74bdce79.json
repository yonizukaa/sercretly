{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n    _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport MaterialTopTabView from \"../views/MaterialTopTabView\";\n\nfunction MaterialTopTabNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n\n  var swipeEnabled = restWithDeprecated.swipeEnabled,\n      lazy = restWithDeprecated.lazy,\n      lazyPlaceholder = restWithDeprecated.lazyPlaceholder,\n      lazyPreloadDistance = restWithDeprecated.lazyPreloadDistance,\n      tabBarOptions = restWithDeprecated.tabBarOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    _extends2(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, \"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.\");\n  }\n\n  var deprecatedProps = {\n    swipeEnabled: swipeEnabled,\n    lazy: lazy,\n    lazyPlaceholder: lazyPlaceholder,\n    lazyPreloadDistance: lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        propName = _ref3[0],\n        propValue = _ref3[1];\n\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      warnOnce(true, \"Material Top Tab Navigator: '\" + propName + \"' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#\" + propName.toLowerCase() + \" for more details.\");\n    }\n  });\n\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(MaterialTopTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\n\nexport default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["restWithDeprecated","rest","defaultScreenOptions","Object","tabBarActiveTintColor","tabBarOptions","tabBarInactiveTintColor","tabBarPressColor","tabBarPressOpacity","tabBarShowLabel","tabBarShowIcon","tabBarAllowFontScaling","tabBarBounces","tabBarScrollEnabled","tabBarIconStyle","tabBarLabelStyle","tabBarItemStyle","tabBarBadge","tabBarIndicator","tabBarIndicatorStyle","tabBarIndicatorContainerStyle","tabBarContentContainerStyle","tabBarStyle","style","key","warnOnce","JSON","deprecatedProps","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","propValue","propName","NavigationContent","useNavigationBuilder","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","descriptors","createNavigatorFactory"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '../types';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  id,\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: swipeEnabled is deprecated\n    swipeEnabled,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: lazyPlaceholder is deprecated\n    lazyPlaceholder,\n    // @ts-expect-error: lazyPreloadDistance is deprecated\n    lazyPreloadDistance,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    (\n      Object.keys(\n        defaultScreenOptions\n      ) as (keyof MaterialTopTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance,\n  } as const;\n\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\n    if (propValue !== undefined) {\n      // @ts-expect-error: Object.entries doesn't return strict types\n      defaultScreenOptions[propName] = propValue;\n\n      warnOnce(\n        true,\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\n      );\n    }\n  });\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      MaterialTopTabNavigationOptions,\n      MaterialTopTabNavigationEventMap\n    >(TabRouter, {\n      id,\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <MaterialTopTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]},"metadata":{},"sourceType":"module"}